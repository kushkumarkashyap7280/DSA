// Subsequences of String

// https://www.naukri.com/code360/problems/subsequences-of-string_985087

/*
Problem statement
You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <=  |STR| <= 16

Where |STR| represents the length of the string 'STR'.

Time Limit: 1 sec
Sample Input 1:
1
abc
Sample Output 1:
a ab abc ac b bc c
Explanation of sample input 1:
All possible subsequences of abc are :
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
Sample Input 2:
1
bbb
Sample Output 2:
b b b bb bb bb bbb
*/

#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to generate all subsequences of a string using backtracking
// Time complexity: O(2^n) where n is the length of the string
// Space complexity: O(n) for the current subsequence
// Note: The result vector will store all subsequences, so the overall space complexity is O(2^n * n) due to storing all subsequences.
// This is a recursive function that generates all subsequences of the string
void subsets(string &str, vector<string> &ans, string &current, int index)
{
  if (!current.empty())
  {
    ans.push_back(current);
  }
  for (int i = index; i < str.size(); i++)
  {
    current.push_back(str[i]);
    subsets(str, ans, current, i + 1);
    current.pop_back();
  }
}
vector<string> subsequences(string str)
{
  vector<string> ans;
  string current;
  subsets(str, ans, current, 0);
  return ans;
}
int main()
{
  string str = "abc"; // Example input
  vector<string> result = subsequences(str);
  for (const string &subseq : result)
  {
    if (!subseq.empty()) // Print only non-empty subsequences
    {
      cout << subseq << " ";
    }
  }
  cout << endl;
  return 0;
}